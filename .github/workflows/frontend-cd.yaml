name: frontendCDworkflow
on:
  workflow_dispatch:
    paths:
      -'frontend/**'
    branches:       
      - main
        
  push:
    paths:
      -'frontend/**'  
    branches: 
      - main

        name: frontendWorkflow

jobs:
  LINT:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest' 

      - name: Cache dependencies
        uses: actions/cache@v4  
        with:
          path: ~/.npm  

      - name: Install dependencies
        run: cd starter/frontend && npm ci
      - name: Run lint      
        run: cd starter/frontend && npm run lint

  TEST: 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Cache dependencies
        uses: actions/cache@v4  
        with:
          path: ~/.npm  

      - name: Install dependencies 
        run: cd starter/frontend && npm ci
      - name: Run test
        run: cd starter/frontend && npm run test

  BUILD:
    needs: [LINT, TEST]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Cache dependencies
        uses: actions/cache@v4  
        with:
          path: ~/.npm  

      - name: Install dependencies
        run: cd starter/frontend && npm ci    
      - name: Run test
        run: cd starter/frontend && npm run test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  

      - name: Login to container registry
        uses: docker/login-action@v2  
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4  
        with:
          context: starter/frontend
          file:  starter/frontend/Dockerfile
          push: true
          tags: your-container-registry/your-image:latest
          build-args: |
              REACT_APP_MOVIE_API_URL=http://localhost:5000
              
jobs:
  deploy_frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Generate deployment package
      run: |
        zip -r application.zip . -x '*.git*'
  


    - name: 
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
        application_name: my-node-app
        environment_name: my-node-app-pr-${{ github.event.pull_request.number }}
        version_label: version-${{ github.run_number }}
        region: us-east-1
        deployment_package: application.zip

    cd starter/frontend/k8s


/# Make sure you're kubeconfig is configured for the EKS cluster, i.e.
/# aws eks update-kubeconfig`

/# Set the image tag to the newer version
/# ℹ️ Don't commit any changes to the manifests that this command introduces

kustomize edit set image frontend=<ECR_REPO_URL>:<NEW_TAG_HERE>

/# Apply the manifests to the cluster
kustomize build | kubectl apply -f -    